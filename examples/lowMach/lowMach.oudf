// Boundary conditions
void velocityDirichletConditions(bcData *bc)
{
  bc->u = 0.5*(3.0 + tanh(bc->x/p_DELTA)); 
  bc->v = 0.0; 
  bc->w = 0.0;
}

void scalarDirichletConditions(bcData *bc)
{
  bc->s = 0.5*(3.0 + tanh(bc->x/p_DELTA));
}


@kernel void userQ(const dlong N,
                   @restrict const dfloat * X,
                   @restrict dfloat * QVOL)
{
  for (dlong id = 0; id < N; ++id; @tile(p_blockSize, @outer, @inner)) {
    const dfloat xd = X[id]/p_DELTA;
    const dfloat sech = 1/cosh(xd);
    QVOL[id] = sech*sech/p_DELTA * (0.5 + tanh(xd)/p_DELTA); 
  }
}

@kernel void userVp(const dlong N,
                    const dlong uOffset,
                    const dlong sOffset,
                    @restrict const dfloat * TEMP,
                    @restrict dfloat * UPROP,
                    @restrict dfloat * SPROP)
{
  for (dlong id = 0; id < N; ++id; @tile(p_blockSize, @outer, @inner)) {
    UPROP[id + 0*uOffset] = 1.0;
    SPROP[id + 0*sOffset] = 1.0;
    UPROP[id + 1*uOffset] = 1/TEMP[id];
    SPROP[id + 1*sOffset] = 1/TEMP[id];
  }
}
