//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "plugins/lowMach.hpp"

#include "ci.inc"

static occa::kernel userVpKernel;
static occa::kernel userMeshVelocityKernel;
static dfloat XLEN;
static dfloat YLEN;
static dfloat ZLEN;

static dfloat P_GAMMA;
static dfloat P_DELTA;
static dfloat P_OMEGA;
static dfloat P_AMP;
static dfloat P_ROT;
 
void userq(nrs_t* nrs, dfloat time, occa::memory o_S, occa::memory o_SU)
{
  lowMach::dpdt(o_SU);
}

void qtl(nrs_t* nrs, dfloat time, occa::memory o_div)
{
  lowMach::qThermalIdealGasSingleComponent(time, o_div);
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;

  userVpKernel(mesh->Nlocal, nrs->fieldOffset, nrs->cds->fieldOffset[0], nrs->p0the,
               o_S, o_UProp, o_SProp);
  if(!platform->options.compareArgs("MESH SOLVER", "NONE")){
    const dfloat nu = 1.0;
    auto o_mesh_diff = o_UProp + (2 * sizeof(dfloat))*nrs->fieldOffset;
    platform->linAlg->fill(nrs->meshV->Nlocal, nu, o_mesh_diff);
  }
}

/* UDF Functions */                                                      

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  kernelInfo["defines/" "p_PI"] = M_PI;
  kernelInfo["defines/" "p_OMEGA"] = P_OMEGA;
  kernelInfo["defines/" "p_AMP"] = P_AMP;
  kernelInfo["defines/" "p_ROT"] = P_ROT;
  userVpKernel = oudfBuildKernel(kernelInfo, "userVp");
  userMeshVelocityKernel = oudfBuildKernel(kernelInfo, "userMeshVelocity");
  lowMach::buildKernel(kernelInfo);
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
  platform->par->extract("casedata", "xlen",XLEN);
  platform->par->extract("casedata", "ylen",YLEN);
  platform->par->extract("casedata", "zlen",ZLEN);
  platform->par->extract("casedata", "p_gamma",P_GAMMA);
  platform->par->extract("casedata", "p_delta",P_DELTA);
  platform->par->extract("casedata", "p_omega",P_OMEGA);
  platform->par->extract("casedata", "p_amp",P_AMP);
  platform->par->extract("casedata", "p_rot",P_ROT);
  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double* const nek_cb_scnrs = (double*) nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = XLEN;
    nek_cb_scnrs[1] = YLEN;
    nek_cb_scnrs[2] = ZLEN;
    nek_cb_scnrs[3] = P_GAMMA;
    nek_cb_scnrs[4] = P_DELTA;
    nek_cb_scnrs[5] = P_OMEGA;
    nek_cb_scnrs[6] = P_AMP;
    nek_cb_scnrs[7] = P_ROT;
  }
}

void UDF_Setup(nrs_t *nrs)
{
  udf.properties = &uservp;
  udf.sEqnSource = &userq;

  lowMach::setup(nrs, P_GAMMA);
  udf.div = &qtl;
}
void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t* mesh = nrs->meshV;
  cds_t* cds = nrs->cds;
  linAlg_t* linAlg = platform->linAlg;

  // user provided mesh velocity
  if(platform->options.compareArgs("MOVING MESH", "TRUE") && 
     platform->options.compareArgs("MESH SOLVER", "NONE")) {

    // rotate back into reference frame
    platform->linAlg->axpbyz(
      mesh->Nlocal,
      -1.0 * std::sin(P_ROT),
      mesh->o_x,
      std::cos(P_ROT),
      mesh->o_y,
      platform->o_mempool.slice0);

    const dfloat hmin = linAlg->min(mesh->Nlocal, platform->o_mempool.slice0, platform->comm.mpiComm);
    const dfloat hmax = linAlg->max(mesh->Nlocal, platform->o_mempool.slice0, platform->comm.mpiComm);
    userMeshVelocityKernel(mesh->Nlocal,
      nrs->fieldOffset,
      hmin,
      hmax,
      time,
      platform->o_mempool.slice0,
      mesh->o_U);
  }

  if(nrs->isOutputStep){
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
